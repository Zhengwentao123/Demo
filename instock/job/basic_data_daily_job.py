#!/usr/local/bin/python3
# -*- coding: utf-8 -*-
import datetime
import logging
import os.path
import sys
import concurrent.futures
import time

cpath_current = os.path.dirname(os.path.dirname(__file__))
cpath = os.path.abspath(os.path.join(cpath_current, os.pardir))
sys.path.append(cpath)
import instock.lib.run_template as runt
import instock.core.tablestructure as tbs
import instock.lib.database as mdb
import instock.core.stockfetch as stf
from instock.core.singleton_stock import stock_data

__author__ = 'myh '
__date__ = '2023/3/10 '

# 示例函数：检查数据库中是否已有相同的 code, deal_amount, new_price 组合的数据
def check_data_exists(code, deal_amount, new_price, table_name):
    # 执行SQL查询，检查指定的 code, deal_amount 和 new_price 组合是否已经存在
    check_sql = f"SELECT COUNT(1) FROM `{table_name}` WHERE `code` = '{code}' AND `deal_amount` = {deal_amount} AND `new_price` = {new_price}"
    result = mdb.executeSql(check_sql)  # 执行查询，返回查询结果
    if result:
        return result[0][0] > 0  # 如果返回的结果大于0，则说明数据已存在
    return False

# 股票实时行情数据。
def save_nph_stock_spot_data(date, before=True):
    if before:
        return
    # 股票列表
    data = stock_data(date).get_data()
    print("data: ", data)
    if data is None or len(data.index) == 0:
        return

    # 排除指定的股票代码
    exclude_codes = ['000001','000002','000063','000070','000088','000100','000166','000333','000338','000408','000425','000507','000520','000525','000538','000568','000582','000596','000615','000617','000625','000629','000651','000655','000669','000686','000708','000709','000712','000717','000725','000728','000729','000731','000750','000752','000761','000768','000776','000778','000783','000792','000799','000807','000821','000825','000851','000858','000860','000869','000889','000893','000895','000898','000902','000905','000909','000912','000923','000929','000932','000938','000959','000963','000977','000989','000995','000999','001203','001205','001227','001269','001289','001872','001965','001979','002001','002005','002024','002027','002040','002050','002056','002075','002092','002110','002124','002129','002142','002168','002170','002179','002197','002200','002218','002230','002241','002251','002259','002274','002289','002304','002309','002311','002312','002316','002318','002320','002352','002371','002388','002415','002424','002425','002443','002459','002461','002463','002470','002475','002478','002485','002490','002493','002500','002506','002528','002538','002539','002545','002556','002568','002569','002588','002592','002594','002600','002602','002617','002623','002625','002646','002648','002650','002670','002673','002700','002714','002721','002736','002742','002748','002756','002797','002807','002808','002822','002839','002865','002872','002897','002916','002920','002926','002936','002938','002939','002945','002948','002958','002966','002999','003816','300014','300015','300029','300033','300051','300059','300093','300096','300097','300118','300124','300125','300137','300163','300165','300205','300268','300274','300300','300305','300308','300313','300316','300317','300345','300368','300376','300387','300393','300394','300408','300419','300433','300498','300502','300505','300555','300600','300716','300724','300750','300751','300760','300763','300776','300827','300842','300881','300979','301046','301168','301266','301278','600000','600009','600010','600011','600015','600016','600017','600018','600019','600022','600023','600025','600026','600028','600029','600030','600031','600036','600048','600050','600059','600061','600066','600078','600084','600089','600095','600096','600104','600109','600115','600117','600126','600132','600136','600141','600150','600151','600155','600160','600183','600188','600190','600197','600199','600207','600221','600227','600231','600276','600279','600282','600287','600295','600303','600307','600309','600346','600360','600365','600369','600372','600377','600381','600382','600399','600406','600428','600436','600438','600470','600481','600482','600489','600507','600519','600537','600543','600547','600559','600568','600569','600573','600581','600584','600585','600599','600600','600603','600608','600616','600621','600660','600671','600674','600690','600691','600696','600702','600703','600711','600717','600732','600751','600760','600777','600779','600782','600795','600798','600803','600808','600809','600831','600837','600845','600876','600886','600887','600893','600900','600905','600906','600908','600909','600918','600919','600926','600928','600938','600941','600958','600989','600999','601000','601003','601005','601006','601008','601009','601012','601018','601022','601059','601066','601077','601083','601088','601099','601100','601108','601111','601121','601127','601128','601136','601162','601166','601169','601186','601187','601198','601211','601225','601228','601229','601236','601238','601288','601298','601318','601319','601326','601328','601336','601375','601377','601390','601398','601456','601528','601555','601577','601579','601600','601601','601618','601628','601633','601658','601665','601668','601669','601686','601688','601689','601696','601698','601727','601728','601766','601788','601800','601816','601818','601825','601838','601857','601860','601865','601866','601868','601872','601878','601880','601881','601888','601898','601899','601901','601908','601916','601919','601939','601963','601969','601975','601985','601988','601989','601990','601995','601997','601998','603007','603019','603105','603162','603167','603185','603195','603198','603209','603212','603259','603260','603288','603323','603330','603369','603377','603381','603388','603392','603395','603396','603398','603501','603557','603589','603628','603778','603806','603828','603869','603878','603879','603893','603919','603959','603986','603993','603995','605117','605158','605499',   '000506','000584','000609','000622','000656','000711','000809','000908','002052','002141','002217','002310','002336','002564','002586','002647','002656','002750','002951','300013','300020','300108','300117','300167','300208','300209','300301','300338','300506','300536','300630','300965','600070','600165','600234','600289','600375','600387','600462','600715','600804','603003','603023','603363','603559','603608','603963']  # 需要排除的股票代码列表
    data = data[~data['code'].isin(exclude_codes)]  # 使用~和isin来排除这些代码

    data = data[data['code'].str.startswith(('60', '00', '30'))]
    table_name = tbs.TABLE_CN_STOCK_SPOT['name']
    # 删除老数据。
    if mdb.checkTableIsExist(table_name):
        print("date==: ", date)


        if isinstance(date, datetime.date):  # 如果date是datetime.date类型
            thirty_days_ago = (date - datetime.timedelta(days=30)).strftime("%Y-%m-%d")
        else:  # 否则假设date是字符串，转化为datetime对象
            thirty_days_ago = (
                        datetime.datetime.strptime(date, "%Y-%m-%d").date() - datetime.timedelta(days=30)).strftime(
                "%Y-%m-%d")

        del_sql = f"DELETE FROM `{table_name}` WHERE `date` < '{thirty_days_ago}'"
        mdb.executeSql(del_sql)
        cols_type = None
    else:
        cols_type = tbs.get_field_types(tbs.TABLE_CN_STOCK_SPOT['columns'])

    for index, row in data.iterrows():
        code = row['code']
        deal_amount = row['deal_amount']  # 假设这两列存在于数据中
        new_price = row['new_price']  # 假设这两列存在于数据中

        if check_data_exists(code, deal_amount, new_price, table_name):
            print(f"数据已存在，跳过日期：{date} 股票代码：{code}, 成交量：{deal_amount}, 新价格：{new_price}")
            continue  # 跳过已经存在数据的股票
    print("写入data: ", data)
    mdb.insert_db_from_df(data, table_name, cols_type, False, "`date`,`code`")



def main():
    runt.run_with_args(save_nph_stock_spot_data)

# main函数入口

def is_weekend(date):
    return date.weekday() >= 5  # 0是周一，6是周日，周六和周日为周末


if __name__ == '__main__':
    # main()

    # date = datetime.datetime(2025, 1, 18).date()
    # save_nph_stock_spot_data(date, False)
    #
    # start_date = datetime.date(2024, 1, 1)
    # end_date = datetime.date(2025, 1, 22)
    # current_date = start_date
    start_date = datetime.date(2025, 1, 20)
    end_date = datetime.date(2025, 1, 22)
    current_date = start_date

    # 使用线程池来并行处理日期范围内的工作日
    with concurrent.futures.ThreadPoolExecutor() as executor:
        while current_date <= end_date:
            if not is_weekend(current_date):  # 如果当前日期是工作日
                save_nph_stock_spot_data(current_date, False)
                time.sleep(2)  # 控制请求频率，避免过于频繁

            current_date += datetime.timedelta(days=1)

    # save_nph_stock_spot_data("2025-1-23", False)
